{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pr\u00e1ctica 6.1 - Dockerizaci\u00f3n del despliegue de una aplicaci\u00f3n con Node.js Despliegue con Docker Para realizar esta pr\u00e1ctica de despliegue con Docker ser\u00e1 necesario tener disponible una aplicaci\u00f3n que desplegar en primer lugar. Para ello, clonar\u00e9 un repositorio de GitHub ejecutando: git clone https://github.com/raul-profesor/DAW_practica_6.1_2024.git Este repositorio ya contiene un documento Dockerfile, pero es necesario modificar su contenido para poder realizar el despliegue correctamente. En este caso, el contenido de este archivo ser\u00e1: FROM node:18.16.0-alpine3.17 RUN mkdir -p /opt/app WORKDIR /opt/app COPY src/package.json src/package-lock.json . RUN npm install COPY src/ . EXPOSE 3000 CMD [ \"npm\", \"start\"] Comando Explicaci\u00f3n FROM node:18.16.0-alpine3.17 Indica que las im\u00e1genes base de esta aplicaci\u00f3n ser\u00e1n la im\u00e1genes oficiales de Node y Alpine Linux en Docker Hub RUN mkdir -p /opt/app Se crea el directorio /opt/app dentro de una nueva capa de la imagen base que estamos utilizando WORKDIR /opt/app Establece '/opt/app/ como el directorio de trabajo a utilizar. Todas las instrucciones se ejecutar\u00e1n desde esta ruta a partir de ahora COPY src/package.json src/package-lock.json . Se copian estos archivos de la m\u00e1quina local a la imagen de Docker RUN npm install Se ejecuta 'npm install' dentro de la imagen de Docker COPY src/ . Se copian el resto de contenidos de src/ (de la m\u00e1quina local) a la imagen de Docker EXPOSE 3000 Indica que el contenedor, en tiempo de ejecuci\u00f3n, debe 'escuchar' en el puerto 3000 CMD [ \"npm\", \"start\"] Indica que el contenedor, al ser arrancado, debe ejecutar 'npm start', lo que har\u00e1 que arranque la ejecuci\u00f3n de la aplicaci\u00f3n Con nuestro archivo Dockerfile preparado, podemos 'construir' la imagen de Docker. Para ello s\u00f3lo hay que ejecutar: docker build -t librodirecciones . Para ejecutar la aplicaci\u00f3n 'dockerizada' y comprobar su buen funcionamiento, hay que ejecutar: $ docker run -p 3000:3000 -d librodirecciones Si accedemos al puerto 3000, tendremos acceso a una referencia de la API de la aplicaci\u00f3n: Docker Compose Para gestionar el contenedor de la aplicaci\u00f3n junto con otro que se encargue de dar servicio de persistencia de datos, el repositorio contiene un archivo 'docker-compose.yml'. A partir de este archivo, levantaremos la infraestructura completa de la aplicaci\u00f3n (los dos contenedores que actualmente la componen). Para ello, hay que ejecutar: docker compose run addressbook npm run migrate # Se crean las tablas de la BBDD docker compose up --build -d # Se construyen los contenedores de la aplicaci\u00f3n Ahora, para comprobar el buen funcionamiento de la aplicaci\u00f3n, voy a realizar una petici\u00f3n PUT para insertar datos dentro de la BBDD de la aplicaci\u00f3n, ejecutando: curl -X PUT http://localhost:3000/persons -H'Content-Type: application/json' -d '{\"id\": 1, \"firstName\": \"Alberto\", \"lasName\": \"P\u00e9rez\"}' Si ahora, desde el navegador, accedo a la ruta que realiza la petici\u00f3n GET de todos los datos de la tabla, muestra:","title":"Pr\u00e1ctica 6.1 - Dockerizaci\u00f3n del despliegue de una aplicaci\u00f3n con Node.js"},{"location":"#practica-61-dockerizacion-del-despliegue-de-una-aplicacion-con-nodejs","text":"","title":"Pr\u00e1ctica 6.1 - Dockerizaci\u00f3n del despliegue de una aplicaci\u00f3n con Node.js"},{"location":"#despliegue-con-docker","text":"Para realizar esta pr\u00e1ctica de despliegue con Docker ser\u00e1 necesario tener disponible una aplicaci\u00f3n que desplegar en primer lugar. Para ello, clonar\u00e9 un repositorio de GitHub ejecutando: git clone https://github.com/raul-profesor/DAW_practica_6.1_2024.git Este repositorio ya contiene un documento Dockerfile, pero es necesario modificar su contenido para poder realizar el despliegue correctamente. En este caso, el contenido de este archivo ser\u00e1: FROM node:18.16.0-alpine3.17 RUN mkdir -p /opt/app WORKDIR /opt/app COPY src/package.json src/package-lock.json . RUN npm install COPY src/ . EXPOSE 3000 CMD [ \"npm\", \"start\"] Comando Explicaci\u00f3n FROM node:18.16.0-alpine3.17 Indica que las im\u00e1genes base de esta aplicaci\u00f3n ser\u00e1n la im\u00e1genes oficiales de Node y Alpine Linux en Docker Hub RUN mkdir -p /opt/app Se crea el directorio /opt/app dentro de una nueva capa de la imagen base que estamos utilizando WORKDIR /opt/app Establece '/opt/app/ como el directorio de trabajo a utilizar. Todas las instrucciones se ejecutar\u00e1n desde esta ruta a partir de ahora COPY src/package.json src/package-lock.json . Se copian estos archivos de la m\u00e1quina local a la imagen de Docker RUN npm install Se ejecuta 'npm install' dentro de la imagen de Docker COPY src/ . Se copian el resto de contenidos de src/ (de la m\u00e1quina local) a la imagen de Docker EXPOSE 3000 Indica que el contenedor, en tiempo de ejecuci\u00f3n, debe 'escuchar' en el puerto 3000 CMD [ \"npm\", \"start\"] Indica que el contenedor, al ser arrancado, debe ejecutar 'npm start', lo que har\u00e1 que arranque la ejecuci\u00f3n de la aplicaci\u00f3n Con nuestro archivo Dockerfile preparado, podemos 'construir' la imagen de Docker. Para ello s\u00f3lo hay que ejecutar: docker build -t librodirecciones . Para ejecutar la aplicaci\u00f3n 'dockerizada' y comprobar su buen funcionamiento, hay que ejecutar: $ docker run -p 3000:3000 -d librodirecciones Si accedemos al puerto 3000, tendremos acceso a una referencia de la API de la aplicaci\u00f3n:","title":"Despliegue con Docker"},{"location":"#docker-compose","text":"Para gestionar el contenedor de la aplicaci\u00f3n junto con otro que se encargue de dar servicio de persistencia de datos, el repositorio contiene un archivo 'docker-compose.yml'. A partir de este archivo, levantaremos la infraestructura completa de la aplicaci\u00f3n (los dos contenedores que actualmente la componen). Para ello, hay que ejecutar: docker compose run addressbook npm run migrate # Se crean las tablas de la BBDD docker compose up --build -d # Se construyen los contenedores de la aplicaci\u00f3n Ahora, para comprobar el buen funcionamiento de la aplicaci\u00f3n, voy a realizar una petici\u00f3n PUT para insertar datos dentro de la BBDD de la aplicaci\u00f3n, ejecutando: curl -X PUT http://localhost:3000/persons -H'Content-Type: application/json' -d '{\"id\": 1, \"firstName\": \"Alberto\", \"lasName\": \"P\u00e9rez\"}' Si ahora, desde el navegador, accedo a la ruta que realiza la petici\u00f3n GET de todos los datos de la tabla, muestra:","title":"Docker Compose"}]}